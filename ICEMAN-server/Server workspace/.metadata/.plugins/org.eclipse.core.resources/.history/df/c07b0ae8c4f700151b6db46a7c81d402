package com.breadcrumbs.heavylifting;

import com.breadcrumbs.models.Location;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.json.JSONObject;

public class TrailManager20 {
	
	/*
	 * Purpose of this method is to process the meta data that we recieve. We want to sort out the bad/unnessesary gps points.
	 * We want to use this method to "clean" the data that we get.
	 * 
	 * @param metadata 
	 * This is basically the description of the entire trail. It contains all the gps points, as well as latitude/longitude of 
	 * every place of interest (where we stay etc), as well as activity at the time etc. This should hopefully not be too much chatter.
	 * 
	 * We want to change this information into the road plots (as based on google maps directions) as well as 
	 */
	public JSONObject ProcessMetadata(String metadata) {
		
		// At the moment I am just converting each gps point into a trail point, but I want to change that later	
		JSONObject metadataObject = new JSONObject(metadata);
		Iterator<String> keys = metadataObject.keys();
		while (keys.hasNext()) {
			String next = keys.next();
			JSONObject node = metadataObject.getJSONObject(next);
			String type = node.getString("type");
			if (!type.equals("gps")) {
				metadataObject.remove(next);
			}
		}
		return metadataObject;
	}
        
        
        public void FetchPathBetweenEvents(Location location1, Location location2) {
            // Fetch the path between the two locations from google. Build a polyline out of that.
            
        }
        
        public String FetchTotalTrailPath(List<Location> locationList) {
            // Create a string to grab the polyline from google Directions api
            String urlString = buildUrl(locationList);
            
            // Fetch the data using the url that we have built.
            JSONObject jsonResponse = fetchDirectionsFromGoogle(urlString); // We get a lot of data from this response, some of it is pretty cool so we should look at using more than we are now.
            String routes = jsonResponse.getString("routes");
            JSONObject overviewPolyline = jsonResponse.getJSONObject("overview_polyline");
            String encodedPolyine = overviewPolyline.getString("points");
            return encodedPolyine;
        }
        
        /*
            Method requests directions from the google directions api, routing the 
            route through the given locations.
        */
        private String buildUrl(List<Location> locationList) {
            String baseUrl = "https://maps.googleapis.com/maps/api/directions/json?origin=";//-44.9439635,168.8379247&destination=-43.4721,170.017685&key=AIzaSyC3zYs82SyMaMlj2Xbss9b51FuoWJEVF-E"
            
            // Fetch the destination and origin of our trail.
            Location origin = locationList.get(0);
            Location destination = locationList.get(locationList.size()-1);
            locationList.remove(0);
            locationList.remove(-1);
            String oLatString = Double.toString(origin.GetLatitude());
            String oLonString = Double.toString(origin.GetLongitude());
            String dLatString = Double.toString(destination.GetLatitude());
            String dLonString = Double.toString(destination.GetLongitude());

            baseUrl.concat(oLatString + "," + oLonString + "&destination="+dLatString + "," + dLonString);
          
            // Iterate through each of the points. Make the first the origin,
            // the last the destination and the rest of them the waypoints.
            if (locationList.size() > 0) {
                boolean first = true;
                baseUrl.concat("&waypoints=");
                Iterator<Location> locationIterator = locationList.iterator();
                while (locationIterator.hasNext()) {
                    
                    Location location = locationIterator.next();
                    Double latitude = location.GetLatitude();
                    Double longitude = location.GetLongitude();
                    String latitudeString = Double.toString(latitude);
                    String longitudeString = Double.toString(longitude);
                    if (!first) {
                         baseUrl.concat("|"+latitudeString + "," + longitudeString);
                    }
                   
                    first = false;

                }
            }
            baseUrl.concat("&key=AIzaSyC3zYs82SyMaMlj2Xbss9b51FuoWJEVF-E");
            return baseUrl;
        }
        
        private JSONObject fetchDirectionsFromGoogle(String urlString) {
            try {
                // Create the connection
                URL url = new URL(urlString);
                URLConnection yc = url.openConnection();
                BufferedReader in = new BufferedReader(new InputStreamReader(yc.getInputStream()));
                String inputLine;

                StringBuilder response = new StringBuilder(); 
                while ((inputLine = in.readLine()) != null)  {
                    System.out.println(inputLine);
                    response.append(inputLine);
                    response.append('\r');                    
                }
                
                in.close();
                JSONObject jsonResponse = new JSONObject(response.toString());
                return jsonResponse;

                
            } catch (MalformedURLException ex) {
                Logger.getLogger(TrailManager20.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TrailManager20.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            return null;
        }
}
//AIzaSyC3zYs82SyMaMlj2Xbss9b51FuoWJEVF-E


